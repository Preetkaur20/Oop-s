// Inheritance - Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.
Generally used for reusability of the code.

class base {
    int x;

    public void setX(int x) {
        System.out.println("I am base");
        this.x = x;
    }

    public int getX() {
        return x;
    }
}

class Derived extends base {
    int y;

    public void setY(int y) {
        System.out.println("I am Derived");
        this.y = y;
    }

    public int getY() {
        return y;
    }
}

public class Inheritance {
    public static void main(String[] args) {

        base b = new base();
        b.setX(10);
        System.out.println(b.getX());

        Derived d = new Derived();
        d.setX(10);
        d.setY(80);
        System.out.println(d.getX());
        System.out.println(d.getY());
    }
}

TYPES OF INHERITANCE 
1. Single inheritance - When a class inherits another class, it is known as a single inheritance.
2. Multilevel Inheritance - When there is a chain of inheritance, it is known as multilevel inheritance.
3. Hierarchical inheritance - When two or more classes inherits a single class, it is known as hierarchical inheritance.
4. Multiple Inheritance is not supported in java To reduce the complexity and simplify the language, multiple inheritance is not supported in java.

   Consider a scenario where A, B, and C are three classes. The C class inherits A and B classes. If A and B classes have the same method and you call it from child class object, there will be ambiguity to call the method of A or B class.
Since compile-time errors are better than runtime errors, Java renders compile-time error if you inherit 2 classes. So whether you have same method or different, there will be compile time error.
